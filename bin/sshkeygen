#!/usr/bin/perl -w

use strict;
use warnings;
use diagnostics;
use lib '/home/chicks/Documents/git/libtmux/lib'; # TODO: remove hack
use Term::TmuxExpect;
use Time::HiRes qw(gettimeofday tv_interval usleep sleep);

# slurp password out of unversioned file
my $password = `cat ~/.creds`;
chomp($password);

my @servers = @ARGV;

foreach my $target (@servers) {
	print "$target:\n";
	my $server = $target;
	$target =~ s/[.]/_/g;
	
	# Spawn tmux window
	my $random = int(rand(1000));
	my $window_name = "${target}_${random}";
	system("tmux new-window -d -n $window_name");
	sleep 1; # TODO: sleep less?

	my $remote = new Term::TmuxExpect($window_name);

#	$remote->expect_last('^chicks.*[$]$'); # at a prompt

	# connect to remote server
	$remote->sendln("ssh $server");
	$remote->timeout('20s'); # remote servers can be very slow

	$remote->expect_last('^chicks'); # at a prompt

	my $sent_password = 0;

	# get to the shell!
	while (1) {
		my @lines = $remote->read_all(3);
		my $last = pop @lines;
		print "got <<$last>>\n";

		# at a prompt on the remote server
		my $server_pattern = $server;
		$server_pattern =~ s/^init[.]/init[1-9]./;
		if ( $last =~ /^chicks[\@]$server_pattern.*[\$]$/ ) {
			# we are ready to go on
			last;
		}

		# look for ssh key prompt
		if ( $last =~ /^Are you sure you want to continue connecting [(]yes[\/]no[)][?]/ ) {
			$remote->sendln('yes');
		}

		# look for password prompt
		if ( $last =~ /^chicks[@].*password:/ ) {
			$sent_password++;
			$remote->sendln($password);
		}

		# breath
		sleep(0.1);
	}


	if ($sent_password) {
		# pull down authorized_keys
		$remote->sendln('mkdir .ssh; chmod 700 .ssh; cd .ssh;  wget https://raw.github.com/chicks-net/chicks-home/master/.ssh/authorized_keys; chmod 600 authorized_keys; ls -al; cd ..');
	}

#	$remote->{debug} = 1; # get more logging output
	# keygen
	# TODO: implement

	# retrieve public key
	# TODO: implement

	# logout of ssh box
	$remote->sendln('exit');
	sleep 1;
	# close tmux window
	$remote->sendln('exit');
	sleep 1;
}


